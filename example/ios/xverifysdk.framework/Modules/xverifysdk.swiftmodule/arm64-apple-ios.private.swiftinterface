// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name xverifysdk
import AVFoundation
import Alamofire
import CocoaLumberjack
import CommonCrypto
import CoreNFC
import CoreVideo
import CryptoKit
import CryptoTokenKit
import Foundation
import MLKitFaceDetection
import MLKitTextRecognition
import MLKitVision
import ObjectMapper
import OpenSSL
import PINCache
import Security
import Swift
import SwiftDate
import UIKit
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import xverifysdk
@_hasMissingDesignatedInitializers public class CecaContentResponseModel : ObjectMapper.Mappable, xverifysdk.ModelProtocol {
  dynamic public var transactionId: Swift.String
  dynamic public var data: xverifysdk.CecaDataResponseModel?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc public func isValid() -> Swift.Bool
  @objc deinit
}
public enum CardType : Swift.String, Swift.CaseIterable, Swift.Codable {
  case FRONT_ID_CARD_9
  case BACK_ID_CARD_9
  case FRONT_ID_CARD_12
  case BACK_ID_CARD_12
  case FRONT_CHIP_ID_CARD
  case BACK_CHIP_ID_CARD
  case PASSPORT
  case UNKNOWN
  public init?(rawValue: Swift.String)
  public typealias AllCases = [xverifysdk.CardType]
  public typealias RawValue = Swift.String
  public static var allCases: [xverifysdk.CardType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct OCRResponseModel : Swift.Codable {
  public let transactionCode: Swift.String
  public let name: Swift.String
  public let surName: Swift.String
  public let givenName: Swift.String
  public let personNumber: Swift.String
  public let dueDate: Swift.String
  public let gender: Swift.String
  public let address: Swift.String
  public let issuedDate: Swift.String
  public let nationality: Swift.String
  public let dateOfBirth: Swift.String
  public let frontType: xverifysdk.CardType
  public let frontValid: Swift.Bool
  public let backType: xverifysdk.CardType
  public let backValid: Swift.Bool
  public let identificationSign: Swift.String
  public let issuedAt: Swift.String
  public let passportNumber: Swift.String
  public init(from decoder: any Swift.Decoder) throws
  public func getFrontType() -> xverifysdk.CardType
  public func getBackType() -> xverifysdk.CardType
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum EkycVerificationMode {
  case liveness
  case liveness_face_matching
  case verify_liveness
  case verify_liveness_face_matching
  public static func == (a: xverifysdk.EkycVerificationMode, b: xverifysdk.EkycVerificationMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension xverifysdk.AnyDecodable : xverifysdk._AnyDecodable {
}
extension xverifysdk._AnyDecodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension xverifysdk.AnyDecodable : Swift.Equatable {
  public static func == (lhs: xverifysdk.AnyDecodable, rhs: xverifysdk.AnyDecodable) -> Swift.Bool
}
extension xverifysdk.AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension xverifysdk.AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension xverifysdk.AnyDecodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum EidAuthenticationStatus {
  case notDone
  case success
  case present
  case failed
  public static func == (a: xverifysdk.EidAuthenticationStatus, b: xverifysdk.EidAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class NfcEidModel {
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [xverifysdk.DataGroupId] {
    get
  }
  public var dataGroupsRead: [xverifysdk.DataGroupId : xverifysdk.DataGroup] {
    get
  }
  public var dataGroupHashes: [xverifysdk.DataGroupId : xverifysdk.DataGroupHash] {
    get
  }
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var eidMRZ: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var eidImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var dg11: xverifysdk.DataGroup11? {
    get
  }
  public var dg13: xverifysdk.DataGroup13? {
    get
  }
  public var documentSigningCertificate: xverifysdk.X509Wrapper? {
    get
  }
  public var countrySigningCertificate: xverifysdk.X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var cardAccess: xverifysdk.CardAccess? {
    get
  }
  public var BACStatus: xverifysdk.EidAuthenticationStatus {
    get
  }
  public var PACEStatus: xverifysdk.EidAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: xverifysdk.EidAuthenticationStatus {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passiveAuthenticationStatus: xverifysdk.EidAuthenticationStatus {
    get
  }
  public var activeAuthenticationStatus: xverifysdk.EidAuthenticationStatus {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [any Swift.Error] {
    get
  }
  public var eidVerified: Swift.Bool
  public var eidSignatureVerified: Swift.Bool
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: xverifysdk.DataGroupId, dataGroup: xverifysdk.DataGroup)
  public func getDataGroup(_ id: xverifysdk.DataGroupId) -> xverifysdk.DataGroup?
  public func dumpEidData(selectedDataGroups: [xverifysdk.DataGroupId], includeActiveAuthenticationData: Swift.Bool = false) -> [Swift.String : Swift.String]
  public func verifyPassiveAuthentication(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: xverifysdk.PACEMappingType, b: xverifysdk.PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class PACEInfo : xverifysdk.SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  public func getParameterId() -> Swift.Int?
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> xverifysdk.PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> xverifysdk.PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Log {
  public static func setup()
  public static func debug(_ message: Swift.String, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.UInt = #line)
  public static func info(_ message: Swift.String, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.UInt = #line)
  public static func warn(_ message: Swift.String, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.UInt = #line)
  public static func error(_ message: Swift.String, file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.UInt = #line)
  @objc deinit
}
public class CecaContentRequestModel : ObjectMapper.Mappable, xverifysdk.ModelProtocol {
  dynamic public var transactionId: Swift.String
  dynamic public var data: xverifysdk.CecaDataRequestModel?
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public func toJsonObj() -> [Swift.String : Any]
  public func toJsonString() -> Swift.String
  @objc public func isValid() -> Swift.Bool
  @objc deinit
}
public struct APIResponse<T> : Swift.Decodable where T : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public class NetworkService {
  public init(proto: Swift.String, hostname: Swift.String, customHeaders: [Swift.String : Swift.String])
  public func setCustomsHeader(customHeaders: [Swift.String : Swift.String])
  public func get<T>(path: Swift.String, parameters: Alamofire.Parameters? = nil, completion: @escaping (Swift.Result<T, any Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  public func post<T>(path: Swift.String, parameters: Alamofire.Parameters? = nil, completion: @escaping (Swift.Result<T, any Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  public func postEid(path: Swift.String, parameters: Alamofire.Parameters? = nil, completion: @escaping (Swift.Result<xverifysdk.CecaVerifyResponseModel, any Swift.Error>) -> Swift.Void)
  public func uploadFile<T>(path: Swift.String, pathFace: Foundation.URL, pathLeft: Foundation.URL, pathRight: Foundation.URL, completion: @escaping (Swift.Result<T, any Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  public func uploadFaceMatchingFile<T>(path: Swift.String, originFacePath: Foundation.URL, capturedFacePath: Foundation.URL, completion: @escaping (Swift.Result<T, any Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  public func uploadOCRFile<T>(path: Swift.String, frontPath: Foundation.URL, backPath: Foundation.URL, completion: @escaping (Swift.Result<T, any Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  @objc deinit
}
public class CecaDataResponseModel : ObjectMapper.Mappable, xverifysdk.ModelProtocol {
  dynamic public var verifyData: xverifysdk.CecaVerifyDataResponseModel?
  dynamic public var timestamp: xverifysdk.CecaTimestampResponseModel?
  dynamic public var providerSignature: Swift.String
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc public func isValid() -> Swift.Bool
  @objc deinit
}
@objc @available(iOS 13, *)
public class EidReader : ObjectiveC.NSObject {
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  public var terminateSessionWhenHangingTime: Swift.Double
  public init(masterListURL: Foundation.URL? = nil)
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  #if compiler(>=5.3) && $AsyncAwait
  public func readEid(mrzKey: Swift.String, tags: [xverifysdk.DataGroupId] = [], skipSecureElements: Swift.Bool = true, skipCA: Swift.Bool = false, skipPACE: Swift.Bool = false, customDisplayMessage: ((xverifysdk.NfcViewDisplayMessage) -> Swift.String?)? = nil) async throws -> xverifysdk.NfcEidModel
  #endif
  @objc deinit
}
@available(iOS 13, *)
extension xverifysdk.EidReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@available(iOS 13, macOS 10.15, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup1 : xverifysdk.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RestResponse : ObjectiveC.NSObject {
  public class func build(_ result: Any?, isSuccess: Swift.Bool = true, statusCode: Swift.Int = 200, allHeaderFields: [Swift.AnyHashable : Any]? = nil, statusMessage: Swift.String? = nil) -> xverifysdk.RestResponse
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MRZUtils {
  public static func processMRZ(sampleBuffer: CoreMedia.CMSampleBuffer, timeRequired: Swift.Int, callback: @escaping (_ data: xverifysdk.MRZInfo?) -> Swift.Void)
  public static func processMRZ(image: UIKit.UIImage, timeRequired: Swift.Int, callback: @escaping (_ data: xverifysdk.MRZInfo?) -> Swift.Void)
  @objc deinit
}
public class CecaInfoResponseModel : ObjectMapper.Mappable, xverifysdk.ModelProtocol {
  dynamic public var referenceMessageId: Swift.String
  dynamic public var responseCode: Swift.Int
  dynamic public var responseMessage: Swift.String
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc public func isValid() -> Swift.Bool
  @objc deinit
}
public class CecaDataRequestModel : ObjectMapper.Mappable, xverifysdk.ModelProtocol {
  dynamic public var code: Swift.String
  dynamic public var cecaTransactionCode: Swift.String
  dynamic public var dsCert: Swift.String
  dynamic public var idCardNumber: Swift.String
  dynamic public var deviceType: Swift.String
  dynamic public var province: Swift.String
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public func toJsonObj() -> [Swift.String : Any]
  public func toJsonString() -> Swift.String
  @objc public func isValid() -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup13 : xverifysdk.DataGroup {
  public static let PREFIX_EID: [Swift.UInt8]
  public static let IDX_FULLNAME: Swift.UInt8
  public static let PREFIX_FULLNAME: [Swift.UInt8]
  public static let IDX_DOB: Swift.UInt8
  public static let PREFIX_DOB: [Swift.UInt8]
  public static let IDX_GENDER: Swift.UInt8
  public static let PREFIX_GENDER: [Swift.UInt8]
  public static let IDX_NATIONALITY: Swift.UInt8
  public static let PREFIX_NATIONALITY: [Swift.UInt8]
  public static let IDX_ETHNICITY: Swift.UInt8
  public static let PREFIX_ETHNICITY: [Swift.UInt8]
  public static let IDX_RELIGION: Swift.UInt8
  public static let PREFIX_RELIGION: [Swift.UInt8]
  public static let IDX_POG: Swift.UInt8
  public static let PREFIX_POG: [Swift.UInt8]
  public static let IDX_POR: Swift.UInt8
  public static let PREFIX_POR: [Swift.UInt8]
  public static let IDX_PERSONAL_IDENTIFICATION: Swift.UInt8
  public static let PREFIX_PERSONAL_IDENTIFICATION: [Swift.UInt8]
  public static let IDX_DATEOFISSUE: Swift.UInt8
  public static let PREFIX_DATEOFISSUE: [Swift.UInt8]
  public static let IDX_DATEOFEXPIRY: Swift.UInt8
  public static let PREFIX_DATEOFEXPIRY: [Swift.UInt8]
  public static let IDX_FAMILY: Swift.UInt8
  public static let PREFIX_FAMILY: [Swift.UInt8]
  public static let PREFIX_FATHERNAME: [Swift.UInt8]
  public static let PREFIX_MOTHERNAME: [Swift.UInt8]
  public static let IDX_SPOUSE: Swift.UInt8
  public static let PREFIX_SPOUSE: [Swift.UInt8]
  public static let PREFIX_SPOUSENAME: [Swift.UInt8]
  public static let IDX_OLDEID: Swift.UInt8
  public static let PREFIX_OLDEID: [Swift.UInt8]
  public static let IDX_CARDUNK: Swift.UInt8
  public static let PREFIX_UNK: [Swift.UInt8]
  public var eidNumber: Swift.String?
  public var fullName: Swift.String?
  public var dateOfBirth: Swift.String?
  public var gender: Swift.String?
  public var nationality: Swift.String?
  public var ethnicity: Swift.String?
  public var religion: Swift.String?
  public var placeOfOrigin: Swift.String?
  public var placeOfResidence: Swift.String?
  public var personalIdentification: Swift.String?
  public var dateOfIssue: Swift.String?
  public var dateOfExpiry: Swift.String?
  public var fatherName: Swift.String?
  public var motherName: Swift.String?
  public var spouseName: Swift.String?
  public var oldEidNumber: Swift.String?
  public var unkIdNumber: Swift.String?
  public var unkInfo: [Swift.String]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup2 : xverifysdk.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup7 : xverifysdk.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
public let kFormatDate: Swift.String
public let kFormatDateShort: Swift.String
public let kFormatDateTime: Swift.String
public let kFormatDateTimeShort: Swift.String
public let kFormatDateTimeLong: Swift.String
public let kFormatUSDateTime24: Swift.String
public let kFormatUSDateTime24Short: Swift.String
public let kFormatUSDateTimeAMPM: Swift.String
public let kFormatUSDateTimeAMPMYearFirst: Swift.String
public let kFormatUSDateTimeAMPMYearFirstGMT: Swift.String
public let kFormatDateUTC: Swift.String
public let kFormatDateISO8601Short: Swift.String
public let kFormatDateISO8601: Swift.String
public let kFormatDateISO8601UTC: Swift.String
public let kFormatDateISO8601UTCTime0: Swift.String
public let kFormatDateISO8601UTCStartDate: Swift.String
public let kFormatDateISO8601UTCSEndDate: Swift.String
public let kFormatDateGMT: Swift.String
public let kFormatDayOfWeekWithDate: Swift.String
public let kFormatDayOfWeekLongWithDate: Swift.String
public let kFormatDayMonthDate: Swift.String
public let kFormatDayOfWeekWithDateTime: Swift.String
public let kFormatDayMonthShort: Swift.String
public let kFormatMonthYearShort: Swift.String
public let kFormatMonthYearLong: Swift.String
public let kFormatDateOnly: Swift.String
public let kFormatDayOfWeekShort: Swift.String
public let kFormatDayOfWeekLong: Swift.String
public let k24FormatTimeHourMinute: Swift.String
public let k24FormatTimeHourMinuteSecond: Swift.String
public let k12FormatTimeHourMinute: Swift.String
public let kFormatMinuteSecond: Swift.String
public let kFormatDateUS: Swift.String
public let kFormatDateUSShort: Swift.String
public let kFormatDateId: Swift.String
public let kFormatUrlParamDate: Swift.String
public let kFormatDateRecordISO: Swift.String
public let kFormatDatePlayback: Swift.String
public let kFormatDatePlaybackWithTimeZone: Swift.String
public let kFormatDatePasscode: Swift.String
public let kFormatDateJobSection: Swift.String
public let kFormatDateVI: Swift.String
public let kFormatUSTimeHourAMPM: Swift.String
public let kFormatDateEventRecord: Swift.String
public let kFormatUSDateTimeSecondAMPM: Swift.String
public let kFormatVIDateTimeSecondAMPM: Swift.String
public let kFormatDateVideoName: Swift.String
public let kFormatDateInterviewSummary: Swift.String
public var SDKBUNDLE: Foundation.Bundle {
  get
}
public var HOMEDIRECTORY: Swift.String {
  get
}
public func LOCALIZED(_ key: Swift.String) -> Swift.String
public func INIT_CONTROLLER_XIB<T>(_ clazz: T.Type) -> T where T : UIKit.UIViewController
public func DISPATCH_ASYNC_MAIN_AFTER(_ delay: Swift.Double, closure: @escaping () -> Swift.Void)
public func DISPATCH_ASYNC_MAIN(_ closure: @escaping () -> Swift.Void)
public func DISPATCH_ASYNC_BG(_ closure: @escaping () -> Swift.Void)
public func DISPATCH_ASYNC_BG_AFTER(_ delay: Swift.Double, _ closure: @escaping () -> Swift.Void)
@available(iOS 13, macOS 10.15, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> xverifysdk.DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [xverifysdk.DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [xverifysdk.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: xverifysdk.CertificateType, b: xverifysdk.CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  public init?(with cert: Swift.OpaquePointer?)
  public func getItemsAsDict() -> [xverifysdk.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
@objc public enum ErrorCode : Swift.Int {
  case invalidUrl = 900
  case invalidResponse = 1000
  case objectParsing = 1001
  case invalidObject = 1002
  case loginError = 1003
  case verifyLivenessError = 1004
  case faceMatchingError = 1005
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class ErrorUtils : ObjectiveC.NSObject {
  public class func error(_ code: xverifysdk.ErrorCode) -> Foundation.NSError
  public class func error(_ code: xverifysdk.ErrorCode, message: Swift.String?) -> Foundation.NSError
  public class func error(_ code: xverifysdk.ErrorCode, message: Swift.String?, shouldLog: Swift.Bool) -> Foundation.NSError
  public class func error(_ result: [Swift.String : Swift.String]) -> Foundation.NSError
  public class func error(_ result: [Swift.String : Any], shouldLog: Swift.Bool) -> Foundation.NSError
  public class func error(_ customCode: Swift.Int, message: Swift.String?) -> Foundation.NSError
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RestClient : ObjectiveC.NSObject {
  public func invoke(_ request: xverifysdk.RestRequest, retryCount: Swift.Int = 3, callback: xverifysdk.RestCallback? = nil)
  public func invokeArray(_ request: xverifysdk.RestRequest, retryCount: Swift.Int = 3, callback: xverifysdk.RestCallback? = nil)
  public func genericInvoke(_ request: xverifysdk.RestRequest, retryCount: Swift.Int = 3, callback: xverifysdk.RestCallback? = nil)
  public func uploadDataInvoke(_ request: xverifysdk.RestRequest, callback: xverifysdk.RestCallback? = nil)
  public func uploadInvoke(_ request: xverifysdk.RestRequest, callback: xverifysdk.RestCallback? = nil)
  public func booleanInvoke(_ request: xverifysdk.RestRequest, encoding: Swift.String, callback: xverifysdk.RestCallback? = nil)
  public func stringInvoke(_ request: xverifysdk.RestRequest, encoding: Swift.String, retryCount: Swift.Int = 3, callback: xverifysdk.RestCallback? = nil)
  public func multiPartInvoke(_ request: xverifysdk.RestRequest, retryCount: Swift.Int = 3, callback: xverifysdk.RestCallback? = nil)
  @objc deinit
}
extension Swift.String : Alamofire.ParameterEncoding {
  public func encode(_ urlRequest: any Alamofire.URLRequestConvertible, with _: Alamofire.Parameters?) throws -> Foundation.URLRequest
}
public class CecaTimestampResponseModel : ObjectMapper.Mappable, xverifysdk.ModelProtocol {
  dynamic public var algorithm: Swift.String
  dynamic public var timestamp: Foundation.Date?
  dynamic public var timestampToken: Swift.String
  dynamic public var transactionId: Swift.String
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc public func isValid() -> Swift.Bool
  @objc deinit
}
public struct FaceMatchingModel : Swift.Codable {
  public let transactionCode: Swift.String
  public let invalidCode: Swift.Int
  public let invalidMessage: Swift.String
  public let isMatch: Swift.Bool
  public let matching: Swift.String
  public let match: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationInfo : xverifysdk.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
public class CecaInfoRequestModel : ObjectMapper.Mappable, xverifysdk.ModelProtocol {
  dynamic public var version: Swift.String
  dynamic public var senderId: Swift.String
  dynamic public var receiverId: Swift.String
  dynamic public var messageType: Swift.Int
  dynamic public var sendDate: Swift.Int64
  dynamic public var messageId: Swift.String
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public func toJsonObj() -> [Swift.String : Any]
  public func toJsonString() -> Swift.String
  @objc public func isValid() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RestRequest : ObjectiveC.NSObject {
  public class func build(_ url: Swift.String, method: Swift.String, parameters: [Swift.String : Any]?) -> xverifysdk.RestRequest
  public class func build(_ url: Swift.String, method: Swift.String, arrayParameters: [[Swift.String : Any]]?) -> xverifysdk.RestRequest
  public class func build(_ url: Swift.String, filePath: Swift.String?, method: Swift.String, parameters: [Swift.String : Any]?) -> xverifysdk.RestRequest
  public class func build(_ url: Swift.String, fileData: Foundation.Data?, method: Swift.String, parameters: [Swift.String : Any]?) -> xverifysdk.RestRequest
  public class func build(_ url: Swift.String, method: Swift.String, parameters: [Swift.String : Any]?, customHeaders: [Swift.String : Swift.String]?) -> xverifysdk.RestRequest
  public class func build(_ url: Swift.String, method: Swift.String, arrayParameters: [[Swift.String : Any]]?, customHeaders: [Swift.String : Swift.String]?) -> xverifysdk.RestRequest
  public class func build(_ url: Swift.String, filePath: Swift.String?, method: Swift.String, parameters: [Swift.String : Any]?, customHeaders: [Swift.String : Swift.String]?) -> xverifysdk.RestRequest
  @objc override dynamic public init()
  @objc deinit
}
public let httpRequestMethodGet: Swift.String
public let httpRequestMethodHead: Swift.String
public let httpRequestMethodDelete: Swift.String
public let httpRequestMethodPost: Swift.String
public let httpRequestMethodPut: Swift.String
public let httpRequestMethodPatch: Swift.String
public let httpRequestContentAll: Swift.String
public let httpRequestContentApplicationOctetStream: Swift.String
public let httpRequestContentBinaryOctetStream: Swift.String
public let httpRequestContentEncodingGzip: Swift.String
public let httpRequestContentFormUrlEncoded: Swift.String
public let httpRequestContentImage: Swift.String
public let httpRequestContentJson: Swift.String
public let httpRequestContentKeepAlive: Swift.String
public let httpRequestContentMultipartFormData: Swift.String
public let httpRequestContentTextPlain: Swift.String
public let httpRequestContentVimeoJson: Swift.String
public let httpRequestContentXml: Swift.String
public let httpRequestHeaderApplicationType: Swift.String
public let httpRequestHeaderAuthorization: Swift.String
public let httpRequestHeaderConnection: Swift.String
public let httpRequestHeaderNameAccept: Swift.String
public let httpRequestHeaderNameContentEncoding: Swift.String
public let httpRequestHeaderNameContentLength: Swift.String
public let httpRequestHeaderNameContentType: Swift.String
public let httpRequestHeaderXApiKey: Swift.String
public let httpUrlRequestContentTypeVimeoJson: Swift.String
public let httpStatusCodeOk: Swift.Int
public let httpStatusCodeCreated: Swift.Int
public let httpStatusCodeAccepted: Swift.Int
public let httpStatusCodeNoContent: Swift.Int
public let httpStatusCodeMultipleChoices: Swift.Int
public let httpStatusCodeUnauthorized: Swift.Int
public let httpStatusCodeForbidden: Swift.Int
public let httpStatusCodeNotFound: Swift.Int
public let httpStatusCodeMethodNotAllowed: Swift.Int
public let httpStatusCodeConflict: Swift.Int
public let httpStatusCodeTimeout: Swift.Int
public let httpStatusRequestTimeout: Swift.Int
public let httpStatusCodeConnectIssue: Swift.Int
public let httpStatusCodeConnectionOffline: Swift.Int
public let httpStatusCodeDeviceOffline: Swift.Int
public let httpStatusCodeInternalError: Swift.Int
public let httpStatusAccountUnAuthorized: Swift.Int
public let httpMimeTypeTextPlain: Swift.String
public let httpMimeTypeTextHtml: Swift.String
public let httpMimeTypeImageJpeg: Swift.String
public let httpMimeTypeImagePng: Swift.String
public let httpMimeTypeAudioMpeg: Swift.String
public let httpMimeTypeAudioOgg: Swift.String
public let httpScheme: Swift.String
public let httpSslScheme: Swift.String
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : xverifysdk.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CecaUtils {
  public class func generateMessageId(senderId: Swift.String) -> Swift.String
  public class func generateSignature(secretKey: Swift.String, request: xverifysdk.CecaRequestModel) -> Swift.String
  public class func getProvince(address: Swift.String?) -> Swift.String?
  public class func normalizeVietnamese(_ str: Swift.String) -> Swift.String?
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NfcViewDisplayMessage {
  case requestPresentEid
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(xverifysdk.DataGroupId, Swift.Int)
  case error(xverifysdk.NfcEIdReaderError)
  case successfulRead
}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.NfcViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func mac(algoName: xverifysdk.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
public func normalizeVietnameseAccent(_ input: Swift.String) -> Swift.String?
public func extractVietnameseProvince(_ address: Swift.String?) -> Swift.String?
public func stringIsNullOrEmpty(_ string: Swift.String?) -> Swift.Bool
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: xverifysdk.DataGroupId
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup14 : xverifysdk.DataGroup {
  public var securityInfos: [xverifysdk.SecurityInfo] {
    get
  }
  @objc deinit
}
public let EIDFACADE: xverifysdk.EidFacade
@_hasMissingDesignatedInitializers public class EidFacade {
  public class var shared: xverifysdk.EidFacade {
    get
  }
  public func generateMRZKey(eidNumber: Swift.String, dateOfBirth: Swift.String, dateOfExpiry: Swift.String) -> Swift.String
  public func readChipNfc(mrzKey: Swift.String, completionHandler: @escaping (_ eid: xverifysdk.NfcEidModel) -> Swift.Void, errorHandler: @escaping (_ error: any Swift.Error) -> Swift.Void)
  public func verifyEid(eid: xverifysdk.NfcEidModel, code: Swift.String = "", path: Swift.String = "", completionHandler: @escaping (_ eid: xverifysdk.EidVerifyModel) -> Swift.Void, errorHandler: @escaping (_ error: any Swift.Error) -> Swift.Void)
  public func verifyRsaSignature(plainText: Swift.String, signature: Swift.String, publicKey: Security.SecKey) -> Swift.Bool
  public func verifyRsaSignature(publicKeyUrl: Foundation.URL, plainText: Swift.String, signature: Swift.String) -> Swift.Bool
  public func setTerminateWhenHangingTimeInterval(timeInterval: Swift.Double)
  @objc deinit
}
public class CecaVerifyResponseModel : ObjectMapper.Mappable, xverifysdk.ModelProtocol {
  dynamic public var info: xverifysdk.CecaInfoResponseModel?
  dynamic public var content: xverifysdk.CecaContentResponseModel?
  dynamic public var signature: Swift.String
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc public func isValid() -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup12 : xverifysdk.DataGroup {
  public var issuingAuthority: Swift.String? {
    get
  }
  public var dateOfIssue: Swift.String? {
    get
  }
  public var otherPersonsDetails: Swift.String? {
    get
  }
  public var endorsementsOrObservations: Swift.String? {
    get
  }
  public var taxOrExitRequirements: Swift.String? {
    get
  }
  public var frontImage: [Swift.UInt8]? {
    get
  }
  public var rearImage: [Swift.UInt8]? {
    get
  }
  public var personalizationTime: Swift.String? {
    get
  }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RestCallback : ObjectiveC.NSObject {
  public typealias RestResponseBlock = (xverifysdk.RestResponse) -> Swift.Void
  public class func callbackWithResult(_ result: xverifysdk.RestCallback.RestResponseBlock?) -> xverifysdk.RestCallback
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup15 : xverifysdk.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  @objc deinit
}
@objc public protocol ModelProtocol {
  @objc optional var searchCriteria: Swift.String { get }
  @objc optional var statusMessage: Swift.String? { get }
  @objc func isValid() -> Swift.Bool
}
@objc public protocol AutoHashable {
}
@_hasMissingDesignatedInitializers public class MRZInfo {
  public var documentType: xverifysdk.DocTypeEnum
  public var documentCode: Swift.String
  public var issuingState: Swift.String
  public var nationality: Swift.String
  public var documentNumber: Swift.String
  public var dateOfBirth: Swift.String
  public var gender: Swift.String
  public var dateOfExpiry: Swift.String
  public static func createTD1MRZInfo(documentCode: Swift.String, issuingState: Swift.String, documentNumber: Swift.String, dateOfBirth: Swift.String, gender: Swift.String, dateOfExpiry: Swift.String, nationality: Swift.String) -> xverifysdk.MRZInfo
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CachedDateFormatter : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func dateFormatterWith(format: Swift.String, locale: Foundation.Locale, isTimeZoneFormat: Swift.Bool = true, timeZone: Foundation.TimeZone? = TimeZone.current) -> Foundation.DateFormatter
  public func dateFormatterWith(format: Swift.String, localeIdentifier: Swift.String) -> Foundation.DateFormatter
  public func dateFormatterWith(format: Swift.String) -> Foundation.DateFormatter
  public func getLocale() -> Foundation.Locale
  @objc deinit
}
@objc public protocol EkycLivenessDelegate {
  @objc optional func onStepLeft()
  @objc optional func onStepCenter()
  @objc optional func onStepRight()
  @objc optional func onStepSmile()
  @objc optional func onMultiFace()
  @objc optional func onNoFace()
  @objc optional func onPlaySound()
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationPublicKeyInfo : xverifysdk.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class NotImplementedDG : xverifysdk.DataGroup {
  @objc deinit
}
public let APISERVICE: xverifysdk.ApiService
@_hasMissingDesignatedInitializers public class ApiService {
  public static var shared: xverifysdk.ApiService
  public static var EID_PROTOCOL: Swift.String
  public static var EID_HOSTNAME: Swift.String
  public func initialize(apiKey: Swift.String)
  public func initialize(apiKey: Swift.String, apiBaseUrl: Swift.String, customerCode: Swift.String)
  public func verifyEid(path: Swift.String, idCard: Swift.String, dsCert: Swift.String, deviceType: Swift.String, province: Swift.String, code: Swift.String, completion: @escaping (Swift.Result<xverifysdk.EidVerifyModel, any Swift.Error>) -> Swift.Void)
  public func verifyLiveness(path: Swift.String, pathFace: Swift.String, pathLeft: Swift.String, pathRight: Swift.String, completion: @escaping (Swift.Result<xverifysdk.LivenessVerifyModel, any Swift.Error>) -> Swift.Void)
  public func verifyCecaEid(path: Swift.String, request: xverifysdk.CecaRequestModel, serviceType: Swift.Int, completion: @escaping (Swift.Result<xverifysdk.CecaVerifyResponseModel, any Swift.Error>) -> Swift.Void)
  public func verifyFaceMatching(path: Swift.String, originFacePath: Swift.String, capturedFacePath: Swift.String, completion: @escaping (Swift.Result<xverifysdk.FaceMatchingModel, any Swift.Error>) -> Swift.Void)
  public func verifyOCR(path: Swift.String, frontPath: Swift.String, backPath: Swift.String, completion: @escaping (Swift.Result<xverifysdk.OCRResponseModel, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
public typealias ObjectResult<T> = (T?, Foundation.NSError?) -> Swift.Void where T : ObjectMapper.Mappable
public typealias ObjectArrayResult<T> = ([T]?, Foundation.NSError?) -> Swift.Void where T : ObjectMapper.Mappable
public typealias BooleanResult = (Swift.Bool, Foundation.NSError?) -> Swift.Void
public typealias StringResult = (Swift.String?, Foundation.NSError?) -> Swift.Void
public typealias JsonResult = ([Swift.String : Any]?, Foundation.NSError?) -> Swift.Void
@objc @_inheritsConvenienceInitializers public class BaseApiService : ObjectiveC.NSObject {
  public class var headers: [Swift.String : Swift.String] {
    get
  }
  public class var multiPartHeaders: [Swift.String : Swift.String] {
    get
  }
  public class var urlEncodedHeaders: [Swift.String : Swift.String] {
    get
  }
  public class func GET(_ url: Swift.String) -> xverifysdk.RestRequest
  public class func GET(_ url: Swift.String, _ customHeaders: [Swift.String : Swift.String]) -> xverifysdk.RestRequest
  public class func GET(_ url: Swift.String, _ parameters: [Swift.String : Any]? = nil) -> xverifysdk.RestRequest
  public class func GET(_ url: Swift.String, _ parameters: [Swift.String : Any]? = nil, _ customHeaders: [Swift.String : Swift.String]) -> xverifysdk.RestRequest
  public class func POST(_ url: Swift.String, _ parameters: [Swift.String : Any]? = nil) -> xverifysdk.RestRequest
  public class func POST(_ url: Swift.String, _ parameters: [Swift.String : Any]? = nil, _ customHeaders: [Swift.String : Swift.String]) -> xverifysdk.RestRequest
  public class func POST_MULTI_PART(_ url: Swift.String, _ parameters: [Swift.String : Any]? = nil) -> xverifysdk.RestRequest
  public class func POST_URL_ENCODED(_ url: Swift.String, _ parameters: [Swift.String : Any]? = nil) -> xverifysdk.RestRequest
  public class func POST(_ url: Swift.String, _ arrayParameters: [[Swift.String : Any]]? = nil) -> xverifysdk.RestRequest
  public class func POST(_ url: Swift.String, _ arrayParameters: [[Swift.String : Any]]? = nil, _ customHeaders: [Swift.String : Swift.String]) -> xverifysdk.RestRequest
  public class func POST(_ url: Swift.String, _ parameters: [Swift.String : Any]? = nil, _ filePath: Swift.String?) -> xverifysdk.RestRequest
  public class func POST(_ url: Swift.String, _ parameters: [Swift.String : Any]? = nil, _ filePath: Swift.String?, _ customHeaders: [Swift.String : Swift.String]) -> xverifysdk.RestRequest
  public class func POST(_ url: Swift.String, _ parameters: [Swift.String : Any]? = nil, _ fileData: Foundation.Data?) -> xverifysdk.RestRequest
  public class func PUT(_ url: Swift.String, _ parameters: [Swift.String : Any]? = nil) -> xverifysdk.RestRequest
  public class func PUT(_ url: Swift.String, _ parameters: [Swift.String : Any]? = nil, _ customHeaders: [Swift.String : Swift.String]) -> xverifysdk.RestRequest
  public class func DELETE(_ url: Swift.String) -> xverifysdk.RestRequest
  public class func DELETE(_ url: Swift.String, _ customHeaders: [Swift.String : Swift.String]) -> xverifysdk.RestRequest
  public class func PATCH(_ url: Swift.String, _ filePath: Swift.String?) -> xverifysdk.RestRequest
  public class func PATCH(_ url: Swift.String, _ filePath: Swift.String?, _ customHeaders: [Swift.String : Swift.String]) -> xverifysdk.RestRequest
  public class func BUILDURLPARAMS(_ url: Swift.String, params: [Swift.String]?) -> Swift.String
  public class func BUILDURLENDPOINT(baseUrl: Swift.String, endPoint: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.Data {
  public func sha256() -> Swift.String
}
extension Swift.String {
  public func sha256() -> Swift.String
  public func matchingStrings(regex: Swift.String) -> [[Swift.String]]
}
public let EKYCSERVICE: xverifysdk.LivenessUtils
@_hasMissingDesignatedInitializers public class LivenessUtils {
  public static let shared: xverifysdk.LivenessUtils
  public func initialize(referenceImagePath: Swift.String?, verificationMode: xverifysdk.EkycVerificationMode, faceDelegate: (any xverifysdk.EkycLivenessDelegate)?, faceResultDelegate: (any xverifysdk.EkycFaceResultDelegate)?, verifyDelegate: (any xverifysdk.EkycVerifyDelegate)?)
  public func processDetectFaces(sampleBuffer: CoreMedia.CMSampleBuffer, width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  public func processDetectFrontFace(sampleBuffer: CoreMedia.CMSampleBuffer, width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  public func performVerifyFrontFaceMatching(originPath: Swift.String)
  @objc deinit
}
@frozen public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension xverifysdk.AnyEncodable : xverifysdk._AnyEncodable {
}
extension xverifysdk._AnyEncodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension xverifysdk.AnyEncodable : Swift.Equatable {
  public static func == (lhs: xverifysdk.AnyEncodable, rhs: xverifysdk.AnyEncodable) -> Swift.Bool
}
extension xverifysdk.AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension xverifysdk.AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension xverifysdk.AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension xverifysdk.AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension xverifysdk.AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension xverifysdk.AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension xverifysdk.AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension xverifysdk.AnyEncodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension xverifysdk.AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension xverifysdk.AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension xverifysdk._AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
extension xverifysdk.AnyEncodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class CardAccess {
  public var securityInfos: [xverifysdk.SecurityInfo] {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NfcEIdReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case UnsupportedCipherAlgorithm
  case UnsupportedMappingType
  case PACEError(Swift.String, Swift.String)
  case ChipAuthenticationFailed
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.NfcEIdReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension xverifysdk.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup11 : xverifysdk.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: xverifysdk.TagReader)
  #if compiler(>=5.3) && $AsyncAwait
  public func performBACAndGetSessionKeys(mrzKey: Swift.String) async throws
  #endif
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
public enum EkycVerifyError {
  case EKYC_FAILED
  case REFERENCE_NOT_FOUND
  case OTHER
  public static func == (a: xverifysdk.EkycVerifyError, b: xverifysdk.EkycVerifyError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol EkycVerifyDelegate {
  func onProcess()
  func onFailed(error: Foundation.NSError, capturedFace: Swift.String, ekycVerificationMode: xverifysdk.EkycVerificationMode, errorCode: xverifysdk.EkycVerifyError)
  func onVerifyCompleted(ekycVerificationMode: xverifysdk.EkycVerificationMode, verifyLiveness: Swift.Bool, verifyFaceMatch: Swift.Bool, capturedFace: Swift.String?)
}
@available(iOS 13, macOS 10.15, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  public func getChild(_ child: Swift.Int) -> xverifysdk.ASN1Item?
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> xverifysdk.ASN1Item
  public func test()
  @objc deinit
}
public struct EidVerifyModel : Swift.Codable {
  public let transactionCode: Swift.String
  public let isValidIdCard: Swift.Bool
  public var responds: Swift.String?
  public let signature: Swift.String
  public let detailMessage: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Foundation.Date {
  public var millisecondsSince1970: Swift.Int64 {
    get
  }
}
@available(iOS 13, *)
public class PACEHandler {
  public init(cardAccess: xverifysdk.CardAccess, tagReader: xverifysdk.TagReader) throws
  #if compiler(>=5.3) && $AsyncAwait
  public func doPACE(mrzKey: Swift.String) async throws
  #endif
  @objc deinit
}
public protocol EkycFaceResultDelegate {
  func onFaceLeft(_ faceLeft: Swift.String)
  func onFaceCenter(_ faceCenter: Swift.String)
  func onFaceRight(_ faceRight: Swift.String)
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: xverifysdk.SecureMessagingSupportedAlgorithms, b: xverifysdk.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: xverifysdk.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
public struct LivenessVerifyModel : Swift.Codable {
  public let transactionCode: Swift.String
  public let invalidCode: Swift.Int
  public let invalidMessage: Swift.String
  public var matching_mid_left: Swift.String
  public let matching_mid_right: Swift.String
  public let isValid: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@frozen public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension xverifysdk.AnyCodable : xverifysdk._AnyEncodable, xverifysdk._AnyDecodable {
}
extension xverifysdk.AnyCodable : Swift.Equatable {
  public static func == (lhs: xverifysdk.AnyCodable, rhs: xverifysdk.AnyCodable) -> Swift.Bool
}
extension xverifysdk.AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension xverifysdk.AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension xverifysdk.AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension xverifysdk.AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension xverifysdk.AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension xverifysdk.AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension xverifysdk.AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension xverifysdk.AnyCodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension xverifysdk.AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension xverifysdk.AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension xverifysdk.AnyCodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class CecaVerifyDataResponseModel : ObjectMapper.Mappable, xverifysdk.ModelProtocol {
  dynamic public var cecaTransactionCode: Swift.String
  dynamic public var isVerified: Swift.Bool
  dynamic public var idCardNumber: Swift.String
  dynamic public var dsCert: Swift.String
  dynamic public var timestamp: Foundation.Date?
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc public func isValid() -> Swift.Bool
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
public class CecaRequestModel : ObjectMapper.Mappable, xverifysdk.ModelProtocol {
  dynamic public var info: xverifysdk.CecaInfoRequestModel?
  dynamic public var content: xverifysdk.CecaContentRequestModel?
  dynamic public var signature: Swift.String
  dynamic public var code: Swift.String
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public func toJsonObj() -> [Swift.String : Any]
  public func toJsonString() -> Swift.String
  @objc public func isValid() -> Swift.Bool
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let didUnAuthorized: Foundation.Notification.Name
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ActiveAuthenticationInfo : xverifysdk.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getSignatureAlgorithmOIDString() -> Swift.String?
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  @available(iOS 13, macOS 10.15, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  @available(iOS 13, macOS 10.15, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
extension xverifysdk.CardType : Swift.Equatable {}
extension xverifysdk.CardType : Swift.Hashable {}
extension xverifysdk.CardType : Swift.RawRepresentable {}
extension xverifysdk.EkycVerificationMode : Swift.Equatable {}
extension xverifysdk.EkycVerificationMode : Swift.Hashable {}
extension xverifysdk.EidAuthenticationStatus : Swift.Equatable {}
extension xverifysdk.EidAuthenticationStatus : Swift.Hashable {}
extension xverifysdk.PACEMappingType : Swift.Equatable {}
extension xverifysdk.PACEMappingType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.DocTypeEnum : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.DataGroupId : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.DataGroupId : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.DataGroupId : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.CertificateType : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.CertificateType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.CertificateItem : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.CertificateItem : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension xverifysdk.CertificateItem : Swift.RawRepresentable {}
extension xverifysdk.ErrorCode : Swift.Equatable {}
extension xverifysdk.ErrorCode : Swift.Hashable {}
extension xverifysdk.ErrorCode : Swift.RawRepresentable {}
extension xverifysdk.EkycVerifyError : Swift.Equatable {}
extension xverifysdk.EkycVerifyError : Swift.Hashable {}
extension xverifysdk.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension xverifysdk.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
